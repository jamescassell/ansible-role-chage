---
- name: test chage module
  hosts: all
  gather_facts: False

  tasks:

  - name: ensure user testuser exists
    user: name=testuser state=present

  - name: pwunconv (removes /etc/shadow)
    command: pwunconv

  - name: test when /etc/shadow does not exist (ignore here is good)
    chage: user=testuser
    ignore_errors: yes
    register: st

  - name: check previous task failed with No such file or directory (skips if ok)
    fail: msg="st.failed is not True or No such file or directory not in msg"
    when: "st.failed != True or 'No such file or directory' not in st.msg"

  - name: pwconv (creates /etc/shadow)
    command: pwconv

  # check set returns changed value

  - name: set testuser sp_lstchg=3
    chage: user=testuser sp_lstchg=3
    register: st

  - name: check st.shadow['sp_lstchg'] == 3 (skips if ok)
    fail: msg=failed
    when: "{{st.shadow['sp_lstchg']}} != 3"

  # check change
  
  - name: set sp_lstchg to 2
    chage: user=testuser sp_lstchg=2
    register: st

  - name: fail if it didn't change
    fail: msg="st.changed is not True"
    when: "st.changed != True"

  - name: check sp_expire with string
    chage: user=testuser sp_expire=1990-06-30
    register: st
    
  - name: fail if it didn't change
    fail: msg="st.changed is not True"
    when: "st.changed != True"
  
  - name: check sp_expire idempotence and with digits
    chage: user=testuser sp_expire=7305
    register: st

  - name: fail if it changed
    fail: msg="st.changed is True"
    when: "st.changed == True"
  
  # check 2 sets at once
  
  - name: check 2 sets at once, initialise
    chage: user=testuser sp_min=0 sp_max=0

  - name: check 2 sets at once
    chage: user=testuser sp_min=7 sp_max=28
    register: st

  - name: check sp_min is 7 and sp_max is 28 (skips if ok)
    fail: msg="either (sp_min is not 7) or (sp_max is not 28)"
    when: "{{st.shadow['sp_min']}} != 7 or {{st.shadow['sp_max']}} != 28"

  - name: check st.changed == True (skips if ok)
    fail: msg="st.changed is not True"
    when: "st.changed != True"

  - name: test get
    chage: user=testuser
    register: st

  - name: test st.shadow.sp_max == 28 (skips if ok)
    fail: msg="sp_max is not 28"
    when: "{{st.shadow['sp_max']}} != 28"

  - name: remove user testuser
    user: name=testuser state=absent

  - name: test get on user which doesn't exist (ignore here is good)
    chage: user=testuser
    ignore_errors: yes
    register: st

  - name: check previous task failed (skips if ok)
    fail: msg="st.failed is no True"
    when: "st.failed != True"

  - debug: msg="All tests successful!"
